import "./chunk-6DBBYCL5.js";

// node_modules/ss-comparator/dist/index.esm.js
var CompareResult;
(function(CompareResult2) {
  CompareResult2[CompareResult2["EQUAL"] = 0] = "EQUAL";
  CompareResult2[CompareResult2["GREATER"] = 1] = "GREATER";
  CompareResult2[CompareResult2["LESS"] = -1] = "LESS";
})(CompareResult || (CompareResult = {}));
var Comparator = function() {
  function Comparator2(compareFunction) {
    this.compare = compareFunction || Comparator2.defaultCompareFunction;
  }
  Comparator2.defaultCompareFunction = function(a, b) {
    if (a === b) {
      return CompareResult.EQUAL;
    }
    return a < b ? CompareResult.LESS : CompareResult.GREATER;
  };
  Comparator2.prototype.equal = function(a, b) {
    return this.compare(a, b) === CompareResult.EQUAL;
  };
  Comparator2.prototype.lessThan = function(a, b) {
    return this.compare(a, b) === CompareResult.LESS;
  };
  Comparator2.prototype.greaterThan = function(a, b) {
    return this.compare(a, b) === CompareResult.GREATER;
  };
  Comparator2.prototype.lessThanOrEqual = function(a, b) {
    return this.lessThan(a, b) || this.equal(a, b);
  };
  Comparator2.prototype.greaterThanOrEqual = function(a, b) {
    return this.greaterThan(a, b) || this.equal(a, b);
  };
  Comparator2.prototype.reverse = function() {
    var compareOriginal = this.compare;
    this.compare = function(a, b) {
      return compareOriginal(b, a);
    };
  };
  return Comparator2;
}();
var index_esm_default = Comparator;

// node_modules/ss-linked-list/dist/index.esm.js
var SinglyNode = function() {
  function SinglyNode2(val) {
    this.value = val;
    this.next = null;
  }
  return SinglyNode2;
}();
var DoublyNode = function() {
  function DoublyNode2(val) {
    this.value = val;
    this.next = null;
    this.prev = null;
  }
  return DoublyNode2;
}();
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
var OBFUSCATED_ERROR = "obfuse error occur";
function invariant(check, message) {
  if (!check)
    throw new Error("[linked-list] " + (message || OBFUSCATED_ERROR));
}
var INDEX_NOT_FOUND = -1;
var List = function() {
  function List2() {
    var _this = this;
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    this._head = null;
    this._tail = null;
    this._length = 0;
    this.compare = new index_esm_default();
    if (values.length > 0) {
      values.forEach(function(value) {
        _this.append(value);
      });
    }
  }
  Object.defineProperty(List2.prototype, "head", {
    get: function() {
      return this._head ? this._head.value : void 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(List2.prototype, "tail", {
    get: function() {
      return this._tail ? this._tail.value : void 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(List2.prototype, "length", {
    get: function() {
      return this._length;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(List2.prototype, "loopLength", {
    get: function() {
      var isLoop = false;
      var loopLength = 1;
      if (!this._head) {
        return 0;
      }
      var p1 = this._head;
      var p2 = this._head;
      while (p2.next && p2.next.next) {
        p2 = p2.next.next;
        p1 = p1.next;
        if (p1 === p2) {
          isLoop = true;
          break;
        }
      }
      if (isLoop) {
        p2 = p2.next;
        while (p1 !== p2) {
          loopLength++;
          p2 = p2.next;
        }
        return loopLength;
      } else {
        return 0;
      }
    },
    enumerable: true,
    configurable: true
  });
  List2.prototype.getNode = function(position) {
    var length = this._length;
    invariant(length > 0 && position >= 0 && position < length, "[linked-list] index " + position + " out of scope of list, which length is " + length);
    var currentNode = this._head;
    var count = 0;
    while (count < position) {
      currentNode = currentNode.next;
      count++;
    }
    return currentNode;
  };
  List2.prototype.get = function(position) {
    var node = this.getNode(position);
    return node ? node.value : null;
  };
  List2.prototype.find = function(_a) {
    var value = _a.value, callback = _a.callback;
    if (!this._head) {
      return null;
    }
    var currentNode = this._head;
    while (currentNode) {
      if (callback && callback(currentNode.value)) {
        return currentNode;
      }
      if (value !== void 0 && this.compare.equal(currentNode.value, value)) {
        return currentNode;
      }
      currentNode = currentNode.next;
    }
    return null;
  };
  List2.prototype.indexOf = function(val) {
    if (!this._head) {
      return INDEX_NOT_FOUND;
    }
    var currentNode = this._head;
    var count = -1;
    while (currentNode.next) {
      count++;
      if (this.compare.equal(currentNode.value, val)) {
        return count;
      }
      currentNode = currentNode.next;
    }
    if (currentNode === this._tail && this.compare.equal(currentNode.value, val)) {
      count += 1;
    }
    return count;
  };
  List2.prototype.first = function(num) {
    invariant(num >= 0, "[linked-list] param 'num' (" + num + ") should not less than 0");
    var iter = this.iterator();
    var result = [];
    var n = Math.min(num, this.length);
    for (var i = 0; i < n; i++) {
      var val = iter.next();
      result.push(val.value);
    }
    return result;
  };
  List2.prototype.toArray = function() {
    return __spread(this);
  };
  List2.prototype.isEmpty = function() {
    return this._head === null;
  };
  List2.prototype.iterator = function() {
    var currentNode;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          currentNode = this._head;
          _a.label = 1;
        case 1:
          if (!currentNode)
            return [3, 3];
          return [4, currentNode.value];
        case 2:
          _a.sent();
          currentNode = currentNode.next;
          return [3, 1];
        case 3:
          return [2];
      }
    });
  };
  List2.prototype[Symbol.iterator] = function() {
    return this.iterator();
  };
  return List2;
}();
var SinglyList = function(_super) {
  __extends(SinglyList2, _super);
  function SinglyList2() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    return _super.apply(this, __spread(values)) || this;
  }
  SinglyList2.prototype.append = function(val) {
    var node = new SinglyNode(val);
    if (!this._tail) {
      this._head = this._tail = node;
    } else {
      this._tail.next = node;
      this._tail = node;
    }
    this._length++;
    return true;
  };
  SinglyList2.prototype.prepend = function(val) {
    var node = new SinglyNode(val);
    if (!this._head) {
      this._head = this._tail = node;
    } else {
      node.next = this._head;
      this._head = node;
    }
    this._length++;
    return true;
  };
  SinglyList2.prototype.remove = function(val) {
    var currentNode = this._head;
    if (!currentNode) {
      return;
    }
    if (this.compare.equal(currentNode.value, val)) {
      if (currentNode.next) {
        this._head = currentNode.next;
        currentNode.next = null;
      } else {
        this._head = this._tail = null;
      }
      this._length--;
      return val;
    } else {
      var prevNode = currentNode;
      while (true) {
        if (this.compare.equal(currentNode.value, val)) {
          if (currentNode.next) {
            prevNode.next = currentNode.next;
          } else {
            this._tail = prevNode;
            this._tail.next = null;
          }
          currentNode.next = null;
          this._length--;
          return val;
        } else {
          if (currentNode.next) {
            prevNode = currentNode;
            currentNode = currentNode.next;
          } else {
            return;
          }
        }
      }
    }
  };
  SinglyList2.prototype.removeHead = function() {
    var currentNode = this._head;
    if (!currentNode) {
      return;
    }
    if (!this._head.next) {
      this._head = null;
      this._tail = null;
    } else {
      this._head = currentNode.next;
      currentNode.next = null;
    }
    this._length--;
    return currentNode.value;
  };
  SinglyList2.prototype.removeTail = function() {
    var tailNode = this._tail;
    if (!tailNode) {
      return;
    }
    if (!this._head.next) {
      this._head = null;
      this._tail = null;
    } else {
      var currentNode = this._head;
      while (currentNode.next !== tailNode) {
        currentNode = currentNode.next;
      }
      currentNode.next = null;
      this._tail = currentNode;
    }
    this._length--;
    return tailNode.value;
  };
  SinglyList2.prototype.reverse = function() {
    if (!this._head) {
      return;
    }
    var currentNode = this._head;
    var prevNode = null;
    var nextNode;
    this._tail = this._head;
    while (currentNode !== null) {
      nextNode = currentNode.next;
      currentNode.next = prevNode;
      prevNode = currentNode;
      currentNode = nextNode;
    }
    this._head = prevNode;
  };
  SinglyList2.prototype.clone = function() {
    var arrValue = this.toArray();
    return new (SinglyList2.bind.apply(SinglyList2, __spread([void 0], arrValue)))();
  };
  return SinglyList2;
}(List);
var AbstractCircleSinglyList = function(_super) {
  __extends(AbstractCircleSinglyList2, _super);
  function AbstractCircleSinglyList2() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    var _this = _super.apply(this, __spread(values)) || this;
    _this.cyclization();
    return _this;
  }
  AbstractCircleSinglyList2.prototype.iterator = function() {
    var currentNode;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          currentNode = this._head;
          _a.label = 1;
        case 1:
          if (!currentNode)
            return [3, 3];
          return [4, currentNode.value];
        case 2:
          _a.sent();
          currentNode = currentNode.next;
          if (currentNode === this._head) {
            currentNode = null;
          }
          return [3, 1];
        case 3:
          return [2];
      }
    });
  };
  AbstractCircleSinglyList2.prototype.circleIterator = function() {
    var currentNode;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          currentNode = this._head;
          _a.label = 1;
        case 1:
          if (!currentNode)
            return [3, 3];
          return [4, currentNode.value];
        case 2:
          _a.sent();
          currentNode = currentNode.next;
          return [3, 1];
        case 3:
          return [2];
      }
    });
  };
  AbstractCircleSinglyList2.prototype[Symbol.iterator] = function() {
    return this.iterator();
  };
  AbstractCircleSinglyList2.prototype.mapToNormalListFn = function(name) {
    var params = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      params[_i - 1] = arguments[_i];
    }
    this.breakCircle();
    var result = _super.prototype[name].apply(this, params);
    this.cyclization();
    return result;
  };
  AbstractCircleSinglyList2.prototype.getNode = function(position) {
    return this.mapToNormalListFn("getNode", position);
  };
  AbstractCircleSinglyList2.prototype.append = function(val) {
    return this.mapToNormalListFn("append", val);
  };
  AbstractCircleSinglyList2.prototype.prepend = function(val) {
    return this.mapToNormalListFn("prepend", val);
  };
  AbstractCircleSinglyList2.prototype.find = function(condition) {
    return this.mapToNormalListFn("find", condition);
  };
  AbstractCircleSinglyList2.prototype.indexOf = function(val) {
    return this.mapToNormalListFn("indexOf", val);
  };
  AbstractCircleSinglyList2.prototype.remove = function(val) {
    return this.mapToNormalListFn("remove", val);
  };
  AbstractCircleSinglyList2.prototype.removeHead = function() {
    return this.mapToNormalListFn("removeHead");
  };
  AbstractCircleSinglyList2.prototype.removeTail = function() {
    return this.mapToNormalListFn("removeTail");
  };
  AbstractCircleSinglyList2.prototype.first = function(num) {
    invariant(num >= 0, "[linked-list] param 'num' (" + num + ") should not less than 0");
    var iter = this.circleIterator();
    var result = [];
    for (var i = 0; i < num; i++) {
      var val = iter.next();
      result.push(val.value);
    }
    return result;
  };
  AbstractCircleSinglyList2.prototype.toArray = function() {
    return this.mapToNormalListFn("toArray");
  };
  AbstractCircleSinglyList2.prototype.reverse = function() {
    return this.mapToNormalListFn("reverse");
  };
  return AbstractCircleSinglyList2;
}(SinglyList);
var CircleSinglyList = function(_super) {
  __extends(CircleSinglyList2, _super);
  function CircleSinglyList2() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    var _this = _super.apply(this, __spread(values)) || this;
    _this.cyclization();
    return _this;
  }
  CircleSinglyList2.prototype.breakCircle = function() {
    if (this._tail && this._tail.next === this._head) {
      this._tail.next = null;
    }
  };
  CircleSinglyList2.prototype.cyclization = function() {
    if (this._tail && this._tail.next === null) {
      this._tail.next = this._head;
    }
  };
  CircleSinglyList2.prototype.clone = function() {
    var arrValue = this.toArray();
    return new (CircleSinglyList2.bind.apply(CircleSinglyList2, __spread([void 0], arrValue)))();
  };
  return CircleSinglyList2;
}(AbstractCircleSinglyList);
var DoublyList = function(_super) {
  __extends(DoublyList2, _super);
  function DoublyList2() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    return _super.apply(this, __spread(values)) || this;
  }
  DoublyList2.prototype.append = function(val) {
    var node = new DoublyNode(val);
    if (!this._tail) {
      this._head = this._tail = node;
    } else {
      this._tail.next = node;
      node.prev = this._tail;
      this._tail = node;
    }
    this._length++;
    return true;
  };
  DoublyList2.prototype.prepend = function(val) {
    var node = new DoublyNode(val);
    if (!this._head) {
      this._head = this._tail = node;
    } else {
      node.next = this._head;
      this._head.prev = node;
      this._head = node;
    }
    this._length++;
    return true;
  };
  DoublyList2.prototype.remove = function(val) {
    var currentNode = this._head;
    if (!currentNode) {
      return;
    }
    if (this.compare.equal(currentNode.value, val)) {
      if (currentNode.next) {
        this._head = currentNode.next;
        this._head.prev = null;
        currentNode.next = currentNode.prev = null;
      } else {
        this._head = this._tail = null;
      }
      this._length--;
      return val;
    } else {
      while (true) {
        if (this.compare.equal(currentNode.value, val)) {
          if (currentNode.next) {
            currentNode.prev.next = currentNode.next;
            currentNode.next.prev = currentNode.prev;
            currentNode.next = currentNode.prev = null;
          } else {
            currentNode.prev.next = null;
            this._tail = currentNode.prev;
            currentNode.next = currentNode.prev = null;
          }
          this._length--;
          return currentNode.value;
        } else {
          if (currentNode.next) {
            currentNode = currentNode.next;
          } else {
            return;
          }
        }
      }
    }
  };
  DoublyList2.prototype.removeHead = function() {
    var currentNode = this._head;
    if (!currentNode) {
      return;
    }
    if (!this._head.next) {
      this._head = null;
      this._tail = null;
    } else {
      currentNode.next.prev = null;
      this._head = currentNode.next;
      currentNode.next = null;
    }
    this._length--;
    return currentNode.value;
  };
  DoublyList2.prototype.removeTail = function() {
    var tailNode = this._tail;
    if (!tailNode) {
      return;
    }
    if (!this._head.next) {
      this._head = null;
      this._tail = null;
    } else {
      tailNode.prev.next = null;
      this._tail = tailNode.prev;
      tailNode.next = tailNode.prev = null;
    }
    this._length--;
    return tailNode.value;
  };
  DoublyList2.prototype.reverse = function() {
    if (!this._head) {
      return;
    }
    var currentNode = this._head;
    var prevNode = null;
    var nextNode;
    this._tail = this._head;
    while (currentNode !== null) {
      nextNode = currentNode.next;
      currentNode.next = prevNode;
      currentNode.prev = nextNode;
      prevNode = currentNode;
      currentNode = nextNode;
    }
    this._head = prevNode;
  };
  DoublyList2.prototype.clone = function() {
    var arrValue = this.toArray();
    return new (DoublyList2.bind.apply(DoublyList2, __spread([void 0], arrValue)))();
  };
  return DoublyList2;
}(List);
var AbstractCircleDoublyList = function(_super) {
  __extends(AbstractCircleDoublyList2, _super);
  function AbstractCircleDoublyList2() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    var _this = _super.apply(this, __spread(values)) || this;
    _this.cyclization();
    return _this;
  }
  AbstractCircleDoublyList2.prototype.iterator = function() {
    var currentNode;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          currentNode = this._head;
          _a.label = 1;
        case 1:
          if (!currentNode)
            return [3, 3];
          return [4, currentNode.value];
        case 2:
          _a.sent();
          currentNode = currentNode.next;
          if (currentNode === this._head) {
            currentNode = null;
          }
          return [3, 1];
        case 3:
          return [2];
      }
    });
  };
  AbstractCircleDoublyList2.prototype.circleIterator = function() {
    var currentNode;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          currentNode = this._head;
          _a.label = 1;
        case 1:
          if (!currentNode)
            return [3, 3];
          return [4, currentNode.value];
        case 2:
          _a.sent();
          currentNode = currentNode.next;
          return [3, 1];
        case 3:
          return [2];
      }
    });
  };
  AbstractCircleDoublyList2.prototype[Symbol.iterator] = function() {
    return this.iterator();
  };
  AbstractCircleDoublyList2.prototype.mapToNormalListFn = function(name) {
    var params = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      params[_i - 1] = arguments[_i];
    }
    this.breakCircle();
    var result = _super.prototype[name].apply(this, params);
    this.cyclization();
    return result;
  };
  AbstractCircleDoublyList2.prototype.getNode = function(position) {
    return this.mapToNormalListFn("getNode", position);
  };
  AbstractCircleDoublyList2.prototype.append = function(val) {
    return this.mapToNormalListFn("append", val);
  };
  AbstractCircleDoublyList2.prototype.prepend = function(val) {
    return this.mapToNormalListFn("prepend", val);
  };
  AbstractCircleDoublyList2.prototype.find = function(condition) {
    return this.mapToNormalListFn("find", condition);
  };
  AbstractCircleDoublyList2.prototype.indexOf = function(val) {
    return this.mapToNormalListFn("indexOf", val);
  };
  AbstractCircleDoublyList2.prototype.remove = function(val) {
    return this.mapToNormalListFn("remove", val);
  };
  AbstractCircleDoublyList2.prototype.removeHead = function() {
    return this.mapToNormalListFn("removeHead");
  };
  AbstractCircleDoublyList2.prototype.removeTail = function() {
    return this.mapToNormalListFn("removeTail");
  };
  AbstractCircleDoublyList2.prototype.first = function(num) {
    invariant(num >= 0, "[linked-list] param 'num' (" + num + ") should not less than 0");
    var iter = this.circleIterator();
    var result = [];
    for (var i = 0; i < num; i++) {
      var val = iter.next();
      result.push(val.value);
    }
    return result;
  };
  AbstractCircleDoublyList2.prototype.toArray = function() {
    return this.mapToNormalListFn("toArray");
  };
  AbstractCircleDoublyList2.prototype.reverse = function() {
    return this.mapToNormalListFn("reverse");
  };
  return AbstractCircleDoublyList2;
}(DoublyList);
var CircleDoublyList = function(_super) {
  __extends(CircleDoublyList2, _super);
  function CircleDoublyList2() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    var _this = _super.apply(this, __spread(values)) || this;
    _this.cyclization();
    return _this;
  }
  CircleDoublyList2.prototype.breakCircle = function() {
    if (this._tail && this._head && this._tail.next === this._head) {
      this._tail.next = null;
      this._head.prev = null;
    }
  };
  CircleDoublyList2.prototype.cyclization = function() {
    if (this._head && this._tail && this._tail.next === null) {
      this._tail.next = this._head;
      this._head.prev = this._tail;
    }
  };
  CircleDoublyList2.prototype.clone = function() {
    var arrValue = this.toArray();
    return new (CircleDoublyList2.bind.apply(CircleDoublyList2, __spread([void 0], arrValue)))();
  };
  return CircleDoublyList2;
}(AbstractCircleDoublyList);

// node_modules/ss-stack/dist/index.esm.js
function __read2(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread2() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read2(arguments[i]));
  return ar;
}
var stack = function() {
  function stack2() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    this.stack = new (SinglyList.bind.apply(SinglyList, __spread2([void 0], values)))();
  }
  Object.defineProperty(stack2.prototype, "length", {
    get: function() {
      return this.stack.length;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(stack2.prototype, "peek", {
    get: function() {
      return this.stack.tail;
    },
    enumerable: true,
    configurable: true
  });
  stack2.prototype.isEmpty = function() {
    return this.stack.isEmpty();
  };
  stack2.prototype.push = function(value) {
    return this.stack.append(value);
  };
  stack2.prototype.pop = function() {
    var removedTail = this.stack.removeTail();
    return typeof removedTail !== "undefined" ? removedTail : void 0;
  };
  stack2.prototype.popBottom = function() {
    var removedHead = this.stack.removeHead();
    return typeof removedHead !== "undefined" ? removedHead : void 0;
  };
  stack2.prototype.toArray = function() {
    return this.stack.toArray();
  };
  return stack2;
}();
var index_esm_default2 = stack;

// dep:ss-stack
var ss_stack_default = index_esm_default2;
export {
  ss_stack_default as default
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
//# sourceMappingURL=ss-stack.js.map
